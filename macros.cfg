#####################################################################
#  Macros
#####################################################################
[gcode_macro G32]
description: Home + QGL + Home
gcode:%}
    {% set parkposition_x = printer["gcode_macro _User_Variables"].parkposition_x %}
    {% set parkposition_y = printer["gcode_macro _User_Variables"].parkposition_y %}
    {% set parkposition_z = printer["gcode_macro _User_Variables"].parkposition_z %}
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    G0 X{parkposition_x} Y{parkposition_y} Z{parkposition_z} F3600
    RESTORE_GCODE_STATE NAME=STATE_G32

[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G32
    {% endif %}
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    {% set SOAK_MINUTES = params.SOAK_MINUTES|default(15)|int %}
    ;{% set SOAK_HOURS = params.SOAK_HOURS|default(0.0)|float %}
    SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1 PROBE_DOCK_ENABLE=1
    SETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1
    BED_MESH_CLEAR
    G92 E0 ; Reset Extruder

    M140 S{BED_TEMP} ;Start heating bed
    M190 S{BED_TEMP} ;Wait for bed to reach temp before proceeding

    M104 S170 ;Start heating extruder
    G32
    HEAT_SOAK BED_TEMP={BED_TEMP} EXTRUDER_TEMP={EXTRUDER_TEMP} SOAK_MINUTES={SOAK_MINUTES} ;SOAK_HOURS={SOAK_HOURS}

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x-10} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro TURN_OFF_MOTORS]
gcode:
  M117 Motors off.
  M118 Motors off.
  M18

# Intro line prints a line at the front edge of the printer to purge the nozzle
# a bit and get stuff goin'!
[gcode_macro INTRO_LINE]
gcode:
    M117 Intro Line..
    M118 Intro Line..
    SAVE_GCODE_STATE NAME=INTRO_LINE_state
    {% set RETRACT = params.RETRACT|default(0.0)|float %}
    {% set FILAMENT_LEN  = params.FILAMENT_LEN|default(15.0)|float %}
    {% set FEED_RATE = params.FEED_RATE|default(600.0)|float %}
    {% set Z_DIST = params.Z_DIST|default(0.3)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240.0)|float %}
    G90                            ; Use absolute coordinates
    G92 E0.0                       ; set extruder posion to 0
    G1 E{RETRACT} F3600           ; extrude retract
    M109 S{EXTRUDER_TEMP}
    G0 Z10
    G1 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_minimum.y+5}
    G1 Z{Z_DIST} F300              ; Move the nozzle very close to the bed
    G92 E0.0                       ; set extruder posion to 0
    G91
    G1 Y+80 E{FILAMENT_LEN} F{FEED_RATE}     ; intro line
    G1 X-0.5
    G1 Y-80 E{FILAMENT_LEN} F{FEED_RATE}
    G92 E0.0                       ; set extruder posion to 0
    M106 S255                      ; turn part cooling to max so we can  breal the thread
    G4 P2000                       ; wait a couple of seconds
    G0 Z+10 Y+20 F24000                 ; move up quickly
    G90
    RESTORE_GCODE_STATE NAME=INTRO_LINE_state
    M117

[gcode_macro PARK_REAR]
gcode:
    M117 Park Rear
    M118 Park Rear
    SAVE_GCODE_STATE NAME=PARK_REAR_state
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_minimum.z+30]|max %}
    #G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x -1} Y{th.axis_maximum.y - 1} z{z_safe} F3600  ; park nozzle at rear
    RESTORE_GCODE_STATE NAME=PARK_REAR_state
    M117

# From other printer. Some of these macros don't yet work on this one, so..
# ... all the good stuff is commented out for now.
#[gcode_macro CLEAN_NOZZLE]
#gcode:
#    M117 Clean Nozzle
#    M118 Clean Nozzle
#    SAVE_GCODE_STATE NAME=CLEAN_NOZZLE_state
#    {% set extruder_temp = params.EXTRUDER_TEMP|default(240)|float %}
#    G4 S0
##    SECURE_DOCK_PROBE
##    G90                            ; Use absolute coordinates
##    M109 S{extruder_temp}          ; Set and wait for nozzle to reach temperature
##    G1 Z15  F12000
##    G1 Y250 F12000
##    G1 X300 F12000
##    G1 Z5 F12000
##    {% set wipe_count=8 %}
##    {% set z_min=-1 %}
##    {% set z_max=5 %}
##    {% set speed=12000 %}
##    {% for wipe in range(wipe_count) %}
##       {% set z=[z_max-loop.index, z_min]|max %}
##       G0 Y300 X290 Z{z} F{speed}
##       G0 Y300 X250 Z{z} F{speed}
##       M117 NC Z={z} i={loop.index}
##    {% endfor %}
##    G1 Z15 F12000
#    RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE_state
#    M117

# https://klipper.discourse.group/t/interruptible-heat-soak/1552
[gcode_macro HEAT_SOAK]
description: heats the bed for a while
 
variable_target_temp: 0
variable_chamber_temp: 0
variable_stage: None ## heating -> soaking -> done -> None
 
## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0
 
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(200)|float %}
    {% set CHAMBER_TEMP = params.CHAMBER_TEMP|default(40)|float %}
    {% set TARGET = params.BED_TEMP | default(100) | float %}
    {% set DURATION = (params.SOAK_MINUTES | default(5) | int) * 60 %} ## minutes to seconds
 
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=chamber_temp        VALUE={ CHAMBER_TEMP }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    { action_respond_info("Soak Time %.0fm, Chamber target temp %.0f" % ((DURATION / 60), CHAMBER_TEMP)) }
 
    ;; fire up the heater
    M109 S{EXTRUDER_TEMP}          ; Set and wait for nozzle to reach temperature
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
 
    ;; run the fan to circulate air
    #_SET_FAN_SPEED PERCENT=50
 
    ;; put the bed and nozzle where they're a safe distance apart
    G28
    PARK_REAR                      ; Go to purge bucket or safe rear location to catch any ooze.
    M117
    M118
 
    M84 ;; turn off steppers
 
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

    PAUSE_BASE

[gcode_macro SOAK_COMPLETE]
description: Continues with the PRINT_START after soaking
gcode:
    G32                            ; home all axes

    BED_MESH_CALIBRATE ; Auto bed leveling, 16 point mesh

    G90                            ; absolute positioning
    G1 Z20 F3000                   ; move nozzle away from bed
    VORON_PURGE
    #INTRO_LINE
 
[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
 
[delayed_gcode heat_soaker]
; ## debug
# { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
    {% set chamber_temp = printer['temperature_sensor chamber'].temperature|float %}
    {% set target_chamber_temp = heat_soak.chamber_temp|float %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
    M117 { "Heat Soak State: %s" | format(heat_soak.stage) }
    M118 { "Heat Soak State: %s" | format(heat_soak.stage) }
 
    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
        M117 { "Heat Soak State: %s" | format(stage) }
        M118 { "Heat Soak State: %s" | format(stage) }
    {% endif %}
 
    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
        M117 { "Soak Time Remaining %.1f" | format(soak_time_remaining / 60 ) }
        M118 { "Soak Time Remaining %.1f" | format(soak_time_remaining / 60) }
 
        {% if soak_time_remaining == 0 or chamber_temp >= target_chamber_temp %}
            {% set stage = "done" %}
            M117 { "Soaking done" }
            M118 { "Soaking done" }
        {% endif %}
    {% endif %}
 
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"
 
    {% if stage in ("done", "cancel") %}
 
        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan
 
            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
            ;; heat soak was cancelled -- also cancel the print
            CANCEL_PRINT
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            M118 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }

            ;; heat soak is complete. Call the complete macro prior to starting the print
            SOAK_COMPLETE
            ;; resume / start the print
            RESUME_BASE
        {% endif %}
 
        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
 
    {% else %}
 
        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}
 
        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }
 
        ## dwell for 1ms to prevent from going idle
        G4 P1
 
    {% endif %}

#[gcode_macro CALIBRATE_Z]
#rename_existing: BASE_CALIBRATE_Z
#gcode:
#    {% set bed_position = params.BED_POSITION|default('None') %}
#    G28
#    M117 Z-Calibration..
#    M118 E1 Z-Calibration..
#    Attach_Probe_Lock                # a macro for fetching the probe first
#    G91
#    G1 Z10
#    G90
#    M118 E1 Base Z-Calibration Start..
#    {% if bed_position != 'None' %}
#      BASE_CALIBRATE_Z BED_POSITION={bed_position}
#    {% else %}
#      BASE_CALIBRATE_Z
#    {% endif %}
#    M118 E1 Base Z-Calibration Finished..
#    Dock_Probe_Lock                # and parking it afterwards (or DOCK_PROBE in klicky macros)
#    M117

[gcode_shell_command backup_cfg]
command: sh /home/michael/autocommit.sh
timeout: 30.
verbose: True

[gcode_macro BACKUP_CFG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_cfg